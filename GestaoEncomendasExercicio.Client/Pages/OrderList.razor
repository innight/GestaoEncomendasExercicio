@page "/orders"
@using GestaoEncomendasExercicio.Client.Services
@using GestaoEncomendasExercicio.Shared.Models
@inject OrderService orderService
@inject IJSRuntime jsRuntime
@inject NotificationService NotificationService
@inject ILogger<OrderList> Logger

<h3 class="mb-4">Lista de Encomendas</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-dismissible @(isSuccess ? "alert-success" : "alert-danger") fade show" role="alert">
        @message
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fechar"></button>
    </div>
}

@if (orders == null)
{
    <div class="d-flex justify-content-center align-items-center mt-3">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">A carregar...</span>
        </div>
        <p class="ms-3 mb-0">A carregar...</p>
    </div>
}
else
{
    <div class="table-responsive mt-3">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Cliente</th>
                    <th>Data</th>
                    <th>Estado</th>
                    <th>Atualizar Estado</th>
                    <th>Eliminar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.CustomerName</td>
                        <td>@order.CreatedAt.ToShortDateString()</td>
                        <td>
                            <select class="form-select" @bind="order.Status">
                                @foreach (var status in availableStatus)
                                {
                                    <option value="@status">@status</option>
                                }
                            </select>
                        </td>
                        <td>
                            <button class="btn btn-primary btn-sm mt-2" @onclick="() => UpdateOrderStatus(order)">Atualizar</button>
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm mt-2" @onclick="() => ConfirmDeleteOrder(order)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Order> orders = new();
    private string[] availableStatus = { "Pendente", "Em preparação", "Despachada", "Entregue" };

    // Status message variables (messages in European Portuguese)
    private string? message;
    private bool isSuccess;

    protected override async Task OnInitializedAsync()
    {
        orders = await orderService.GetAllOrdersAsync();
    }

    private async Task UpdateOrderStatus(Order order)
    {

        try
        {
            var result = await orderService.UpdateOrderStatusAsync(order.Id, order.Status);
            if (result.IsSuccess)
                await NotificationService.ShowSuccess("Encomenda atualizada com sucesso!");
            else
                await NotificationService.ShowError($"Erro ao atualizar a encomenda: {result.ErrorMessage}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao atualizar a encomenda");
            await NotificationService.ShowError("Erro interno ao atualizar a encomenda.");
        }

        orders = await orderService.GetAllOrdersAsync();
        StateHasChanged();
    }

    private async Task ConfirmDeleteOrder(Order order)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Tem a certeza que deseja eliminar esta encomenda?");
        if (confirmed)
        {
            await DeleteOrder(order);
        }
    }

    private async Task DeleteOrder(Order order)
    {
        try
        {
            var result = await orderService.DeleteOrderAsync(order.Id);
            if (result.IsSuccess)
            {
                orders.Remove(order);
                await NotificationService.ShowSuccess("Encomenda eliminada com sucesso!");
            }
            else
            {
                Logger.LogWarning("Erro ao eliminar a encomenda: {Error}", result.ErrorMessage);
                await NotificationService.ShowError("Erro ao eliminar a encomenda: " + result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao eliminar encomenda");
            await NotificationService.ShowError("Erro interno ao eliminar a encomenda.");
        }
        StateHasChanged();
    }
}